{"version":3,"file":"google-card.js","sources":["../src/constants.js","../src/styles/SharedStyles.js","../src/components/BackgroundRotator.js","../src/GoogleCard.js"],"sourcesContent":["// src/constants.js\nexport const OVERLAY_DISMISS_TIMEOUT = 10000;\nexport const LONG_PRESS_TIMEOUT = 1000;\nexport const NIGHT_MODE_TRANSITION_DELAY = 100;\nexport const TRANSITION_BUFFER = 50;\nexport const DEFAULT_BRIGHTNESS = 128;\nexport const MAX_BRIGHTNESS = 255;\nexport const MIN_BRIGHTNESS = 1;\nexport const SWIPE_THRESHOLD = 50;\nexport const DEFAULT_SENSOR_UPDATE_DELAY = 500;\nexport const BRIGHTNESS_DEBOUNCE_DELAY = 250;\nexport const BRIGHTNESS_STABILIZE_DELAY = 2000;\n\nexport const DEFAULT_CONFIG = {\n  image_url: '',\n  display_time: 15,\n  crossfade_time: 3,\n  image_fit: 'contain',\n  image_list_update_interval: 3600,\n  image_order: 'sorted',\n  show_debug: false,\n  sensor_update_delay: DEFAULT_SENSOR_UPDATE_DELAY,\n  device_name: 'mobile_app_liam_s_room_display', // Customizable device target\n  show_date: true,\n  show_time: true,\n  show_weather: true,\n  show_aqi: true,\n  weather_entity: 'weather.forecast_home',\n  aqi_entity: 'sensor.air_quality_index',\n  light_sensor_entity: 'sensor.liam_room_display_light_sensor',\n  brightness_sensor_entity: 'sensor.liam_room_display_brightness_sensor',\n};\n\nexport const IMAGE_SOURCE_TYPES = {\n  MEDIA_SOURCE: 'media-source',\n  UNSPLASH_API: 'unsplash-api',\n  IMMICH_API: 'immich-api',\n  PICSUM: 'picsum',\n  URL: 'url'\n};\n","// src/styles/SharedStyles.js\nimport { css } from 'https://cdn.jsdelivr.net/gh/lit/dist@2.4.0/all/lit-element.js?module';\n\nexport const sharedStyles = css`\n  :host {\n    --crossfade-time: 3s;\n    --overlay-height: 120px;\n    --theme-transition: background-color 0.3s ease, color 0.3s ease;\n    --theme-background: #ffffff;\n    --theme-text: #333333;\n    --overlay-background: rgba(255, 255, 255, 0.95);\n    --control-text-color: #333;\n    --brightness-dot-color: #d1d1d1;\n    --brightness-dot-active: #333;\n    --background-blur: 10px;\n    \n    display: block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 1;\n    font-family: 'Product Sans Regular', sans-serif;\n    font-weight: 400;\n    transition: var(--theme-transition);\n  }\n\n  html[data-theme=\"dark\"], :host([data-theme=\"dark\"]) {\n    --theme-background: #121212;\n    --theme-text: #ffffff;\n    --overlay-background: rgba(32, 33, 36, 0.95);\n    --control-text-color: #fff;\n    --brightness-dot-color: #5f6368;\n    --brightness-dot-active: #fff;\n  }\n\n  .error {\n    position: fixed;\n    bottom: 10px;\n    left: 10px;\n    background-color: rgba(255, 0, 0, 0.7);\n    color: white;\n    padding: 10px 15px;\n    border-radius: 5px;\n    font-size: 14px;\n    z-index: 1000;\n    max-width: 90%;\n    word-wrap: break-word;\n  }\n`;\n","// src/components/BackgroundRotator.js\nimport { LitElement, html, css } from 'https://cdn.jsdelivr.net/gh/lit/dist@2.4.0/all/lit-element.js?module';\nimport { TRANSITION_BUFFER, IMAGE_SOURCE_TYPES } from '../constants';\nimport { sharedStyles } from '../styles/SharedStyles';\n\nexport class BackgroundRotator extends LitElement {\n  static get properties() {\n    return {\n      hass: { type: Object },\n      config: { type: Object },\n      screenWidth: { type: Number },\n      screenHeight: { type: Number },\n      currentImageIndex: { type: Number },\n      imageList: { type: Array },\n      imageA: { type: String },\n      imageB: { type: String },\n      activeImage: { type: String },\n      isTransitioning: { type: Boolean },\n      error: { type: String },\n    };\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        .background-container {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: black;\n        }\n\n        .background-image {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-size: contain;\n          background-position: center;\n          background-repeat: no-repeat;\n          transition: opacity var(--crossfade-time) ease-in-out;\n        }\n      `\n    ];\n  }\n\n  constructor() {\n    super();\n    this.currentImageIndex = -1;\n    this.imageList = [];\n    this.imageA = '';\n    this.imageB = '';\n    this.activeImage = 'A';\n    this.preloadedImage = '';\n    this.isTransitioning = false;\n    this.error = null;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.updateImageList().then(() => {\n      this.startImageRotation();\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.imageUpdateInterval) clearInterval(this.imageUpdateInterval);\n    if (this.imageListUpdateInterval) clearInterval(this.imageListUpdateInterval);\n  }\n\n  startImageRotation() {\n    // Initial update after a small delay to ensure image list is populated\n    setTimeout(() => this.updateImage(), 500);\n    \n    // Schedule periodic updates\n    this.imageUpdateInterval = setInterval(() => {\n      this.updateImage();\n    }, Math.max(5, this.config?.display_time || 15) * 1000);\n    \n    // Schedule periodic image list updates\n    this.imageListUpdateInterval = setInterval(() => {\n      this.updateImageList();\n    }, Math.max(60, this.config?.image_list_update_interval || 3600) * 1000);\n  }\n\n  getImageSourceType() {\n    if (!this.config?.image_url) return IMAGE_SOURCE_TYPES.URL;\n    \n    const { image_url } = this.config;\n    if (image_url.startsWith('media-source://')) return IMAGE_SOURCE_TYPES.MEDIA_SOURCE;\n    if (image_url.startsWith('https://api.unsplash')) return IMAGE_SOURCE_TYPES.UNSPLASH_API;\n    if (image_url.startsWith('immich+')) return IMAGE_SOURCE_TYPES.IMMICH_API;\n    if (image_url.includes('picsum.photos')) return IMAGE_SOURCE_TYPES.PICSUM;\n    return IMAGE_SOURCE_TYPES.URL;\n  }\n\n  getImageUrl() {\n    if (!this.config?.image_url) return '';\n    \n    const timestamp_ms = Date.now();\n    const timestamp = Math.floor(timestamp_ms / 1000);\n    const width = this.screenWidth || 1280;\n    const height = this.screenHeight || 720;\n    \n    return this.config.image_url\n      .replace(/\\${width}/g, width)\n      .replace(/\\${height}/g, height)\n      .replace(/\\${timestamp_ms}/g, timestamp_ms)\n      .replace(/\\${timestamp}/g, timestamp);\n  }\n\n  async updateImageList() {\n    if (!this.screenWidth || !this.screenHeight) {\n      this.error = 'Screen dimensions not set';\n      this.requestUpdate();\n      return;\n    }\n\n    try {\n      const newImageList = await this.fetchImageList();\n      \n      // Ensure we have valid image URLs\n      if (!Array.isArray(newImageList) || newImageList.length === 0) {\n        throw new Error('No valid images found');\n      }\n      \n      // Apply sorting/randomization\n      this.imageList = this.config?.image_order === 'random'\n        ? this.shuffleArray([...newImageList])\n        : [...newImageList].sort();\n\n      // Set initial image if first load\n      if (this.currentImageIndex === -1 && this.imageList.length > 0) {\n        try {\n          this.imageA = await this.preloadImage(this.imageList[0]);\n          this.currentImageIndex = 0;\n          this.error = null;\n        } catch (error) {\n          this.error = `Error loading initial image: ${error.message}`;\n        }\n      }\n\n      this.requestUpdate();\n      return this.imageList;\n    } catch (error) {\n      this.error = `Error updating image list: ${error.message}`;\n      this.requestUpdate();\n      return [];\n    }\n  }\n\n  // Fisher-Yates shuffle algorithm\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  async fetchImageList() {\n    switch (this.getImageSourceType()) {\n      case IMAGE_SOURCE_TYPES.MEDIA_SOURCE:\n        return this.getImagesFromMediaSource();\n\n      case IMAGE_SOURCE_TYPES.UNSPLASH_API:\n        return this.getImagesFromUnsplashAPI();\n\n      case IMAGE_SOURCE_TYPES.IMMICH_API:\n        return this.getImagesFromImmichAPI();\n\n      case IMAGE_SOURCE_TYPES.PICSUM: {\n        // For Picsum, return multiple URLs to allow rotation\n        return Array.from({ length: 10 }, () => this.getImageUrl());\n      }\n\n      default: {\n        const url = this.getImageUrl();\n        return url ? [url] : [];\n      }\n    }\n  }\n\n  async getImagesFromMediaSource() {\n    if (!this.hass) return [this.getImageUrl()];\n    \n    try {\n      const mediaContentId = this.config.image_url.replace(/^media-source:\\/\\//, '');\n      const result = await this.hass.callWS({\n        type: 'media_source/browse_media',\n        media_content_id: mediaContentId,\n      });\n      \n      if (!result || !Array.isArray(result.children)) {\n        throw new Error('Invalid response from media source');\n      }\n      \n      return result.children\n        .filter(child => child.media_class === 'image')\n        .map(child => child.media_content_id);\n    } catch (error) {\n      console.error('Error fetching images from media source:', error);\n      const fallback = this.getImageUrl();\n      return fallback ? [fallback] : [];\n    }\n  }\n\n  async getImagesFromUnsplashAPI() {\n    try {\n      const response = await fetch(`${this.config.image_url}&count=30`);\n      \n      if (!response.ok) {\n        throw new Error(`Unsplash API returned status ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!Array.isArray(data)) {\n        throw new Error('Invalid response from Unsplash API');\n      }\n      \n      return data.map(image => image.urls.regular);\n    } catch (error) {\n      console.error('Error fetching images from Unsplash API:', error);\n      const fallback = this.getImageUrl();\n      return fallback ? [fallback] : [];\n    }\n  }\n\n  async getImagesFromImmichAPI() {\n    try {\n      if (!this.config.immich_api_key) {\n        throw new Error('Immich API key not configured');\n      }\n      \n      const apiUrl = this.config.image_url.replace(/^immich\\+/, '');\n      const response = await fetch(`${apiUrl}/albums`, {\n        headers: {\n          'x-api-key': this.config.immich_api_key,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Immich API returned status ${response.status}`);\n      }\n      \n      const albums = await response.json();\n      \n      if (!Array.isArray(albums)) {\n        throw new Error('Invalid response from Immich API');\n      }\n\n      const imagePromises = albums.map(async (album) => {\n        const albumResponse = await fetch(`${apiUrl}/albums/${album.id}`, {\n          headers: {\n            'x-api-key': this.config.immich_api_key,\n          },\n        });\n        \n        if (!albumResponse.ok) {\n          throw new Error(`Immich API album fetch returned status ${albumResponse.status}`);\n        }\n        \n        const albumData = await albumResponse.json();\n        \n        if (!albumData || !Array.isArray(albumData.assets)) {\n          return [];\n        }\n        \n        return albumData.assets\n          .filter(asset => asset.type === 'IMAGE')\n          .map(asset => `${apiUrl}/assets/${asset.id}/original`);\n      });\n\n      return (await Promise.all(imagePromises)).flat();\n    } catch (error) {\n      console.error('Error fetching images from Immich API:', error);\n      const fallback = this.getImageUrl();\n      return fallback ? [fallback] : [];\n    }\n  }\n\n  async preloadImage(url) {\n    if (!url) {\n      throw new Error('Invalid image URL');\n    }\n    \n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      \n      const timeout = setTimeout(() => {\n        reject(new Error(`Image load timeout: ${url}`));\n      }, 30000); // 30 second timeout\n      \n      img.onload = () => {\n        clearTimeout(timeout);\n        resolve(url);\n      };\n      \n      img.onerror = () => {\n        clearTimeout(timeout);\n        reject(new Error(`Failed to load image: ${url}`));\n      };\n      \n      img.src = url;\n    });\n  }\n\n  async updateImage() {\n    // Skip if already transitioning or if image list is empty\n    if (this.isTransitioning || this.imageList.length === 0) return;\n\n    try {\n      const nextImageIndex = (this.currentImageIndex + 1) % this.imageList.length;\n      let nextImage;\n      \n      if (this.getImageSourceType() === IMAGE_SOURCE_TYPES.PICSUM) {\n        nextImage = this.getImageUrl();\n      } else {\n        nextImage = this.imageList[nextImageIndex];\n      }\n      \n      // Wait for the image to load\n      nextImage = await this.preloadImage(nextImage);\n      this.currentImageIndex = nextImageIndex;\n      \n      // Transition to new image\n      this.isTransitioning = true;\n\n      if (this.activeImage === 'A') {\n        this.imageB = nextImage;\n      } else {\n        this.imageA = nextImage;\n      }\n\n      this.requestUpdate();\n\n      // Short delay to ensure DOM update before transition\n      await new Promise(resolve => setTimeout(resolve, TRANSITION_BUFFER));\n      \n      // Start transition by changing active image\n      this.activeImage = this.activeImage === 'A' ? 'B' : 'A';\n      this.requestUpdate();\n\n      // Wait for transition to complete\n      const transitionTime = (this.config?.crossfade_time || 3) * 1000 + TRANSITION_BUFFER;\n      await new Promise(resolve => setTimeout(resolve, transitionTime));\n      \n      this.isTransitioning = false;\n    } catch (error) {\n      console.error('Error updating image:', error);\n      this.isTransitioning = false;\n    }\n  }\n\n  render() {\n    const imageAOpacity = this.activeImage === 'A' ? 1 : 0;\n    const imageBOpacity = this.activeImage === 'B' ? 1 : 0;\n    const imageFit = this.config?.image_fit || 'contain';\n\n    return html`\n      <div class=\"background-container\">\n        <div\n          class=\"background-image\"\n          style=\"background-image: url('${this.imageA}'); \n                 opacity: ${imageAOpacity};\n                 background-size: ${imageFit};\"\n        ></div>\n        <div\n          class=\"background-image\"\n          style=\"background-image: url('${this.imageB}'); \n                 opacity: ${imageBOpacity};\n                 background-size: ${imageFit};\"\n        ></div>\n      </div>\n      ${this.error ? html`<div class=\"error\">${this.error}</div>` : ''}\n    `;\n  }\n}\n\ncustomElements.define('background-rotator', BackgroundRotator);\n","// src/GoogleCard.js\nimport { LitElement, html, css } from 'https://cdn.jsdelivr.net/gh/lit/dist@2.4.0/all/lit-element.js?module';\nimport { DEFAULT_CONFIG, MIN_BRIGHTNESS } from './constants';\nimport { sharedStyles } from './styles/SharedStyles';\nimport './components/BackgroundRotator';\nimport './components/Controls';\nimport './components/NightMode';\nimport './components/WeatherClock';\n\nexport class GoogleCard extends LitElement {\n  static get properties() {\n    return {\n      hass: { type: Object },\n      config: { type: Object },\n      screenWidth: { type: Number },\n      screenHeight: { type: Number },\n      showDebugInfo: { type: Boolean },\n      showOverlay: { type: Boolean },\n      isOverlayVisible: { type: Boolean },\n      isOverlayTransitioning: { type: Boolean },\n      brightness: { type: Number },\n      visualBrightness: { type: Number },\n      showBrightnessCard: { type: Boolean },\n      isBrightnessCardVisible: { type: Boolean },\n      isBrightnessCardTransitioning: { type: Boolean },\n      isNightMode: { type: Boolean },\n      currentTime: { type: String },\n      isInNightMode: { type: Boolean },\n      previousBrightness: { type: Number },\n      isAdjustingBrightness: { type: Boolean },\n      lastBrightnessUpdateTime: { type: Number },\n      touchStartY: { type: Number },\n      touchStartX: { type: Number },\n      touchStartTime: { type: Number },\n      isDarkMode: { type: Boolean },\n    };\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: block;\n          width: 100%;\n          height: 100%;\n          position: fixed;\n          top: 0;\n          left: 0;\n          overflow: hidden;\n        }\n\n        .touch-container {\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 0;\n          touch-action: none;\n        }\n\n        .content-wrapper {\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n      `\n    ];\n  }\n\n  constructor() {\n    super();\n    this.initializeProperties();\n    this.boundUpdateScreenSize = this.updateScreenSize.bind(this);\n    this.brightnessUpdateQueue = [];\n    this.isProcessingBrightnessUpdate = false;\n    \n    // Theme detection\n    this.isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.themeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this.boundHandleThemeChange = this.handleThemeChange.bind(this);\n    \n    // Bind event handler methods to preserve 'this' context\n    this.handleBrightnessCardToggle = this.handleBrightnessCardToggle.bind(this);\n    this.handleBrightnessChange = this.handleBrightnessChange.bind(this);\n    this.handleDebugToggle = this.handleDebugToggle.bind(this);\n    this.handleNightModeExit = this.handleNightModeExit.bind(this);\n  }\n\n  initializeProperties() {\n    this.showDebugInfo = false;\n    this.showOverlay = false;\n    this.isOverlayVisible = false;\n    this.isOverlayTransitioning = false;\n    this.isNightMode = false;\n    this.showBrightnessCard = false;\n    this.isBrightnessCardVisible = false;\n    this.isBrightnessCardTransitioning = false;\n    this.brightness = DEFAULT_CONFIG.brightness || 128;\n    this.visualBrightness = this.brightness;\n    this.previousBrightness = this.brightness;\n    this.isInNightMode = false;\n    this.isAdjustingBrightness = false;\n    this.lastBrightnessUpdateTime = 0;\n    this.touchStartY = 0;\n    this.touchStartX = 0;\n    this.touchStartTime = 0;\n    this.overlayDismissTimer = null;\n    this.brightnessCardDismissTimer = null;\n    this.brightnessStabilizeTimer = null;\n    this.timeUpdateInterval = null;\n    this.nightModeSource = null;\n\n    this.updateScreenSize();\n    this.updateTime();\n  }\n\n  // Home Assistant configuration\n  static getConfigElement() {\n    return document.createElement('google-card-editor');\n  }\n\n  static getStubConfig() {\n    return {\n      image_url: 'https://source.unsplash.com/random',\n      display_time: 15,\n      crossfade_time: 3,\n      image_fit: 'contain',\n      show_date: true,\n      show_time: true,\n      show_weather: true,\n      show_aqi: true,\n      weather_entity: 'weather.forecast_home',\n      aqi_entity: 'sensor.air_quality_index',\n      device_name: 'mobile_app_device',\n      light_sensor_entity: 'sensor.light_sensor',\n      brightness_sensor_entity: 'sensor.brightness_sensor',\n    };\n  }\n\n  setConfig(config) {\n    if (!config.image_url) {\n      throw new Error('You need to define an image_url');\n    }\n\n    this.config = {\n      ...DEFAULT_CONFIG,\n      ...config,\n      sensor_update_delay: config.sensor_update_delay || DEFAULT_CONFIG.sensor_update_delay\n    };\n\n    this.showDebugInfo = this.config.show_debug;\n    this.updateCssVariables();\n  }\n  \n  updateCssVariables() {\n    if (!this.config) return;\n    \n    this.style.setProperty('--crossfade-time', `${this.config.crossfade_time || 3}s`);\n    this.style.setProperty('--theme-transition', 'background-color 0.3s ease, color 0.3s ease');\n    this.style.setProperty('--theme-background', this.isDarkMode ? '#121212' : '#ffffff');\n    this.style.setProperty('--theme-text', this.isDarkMode ? '#ffffff' : '#333333');\n    \n    document.documentElement.style.setProperty('--theme-transition', 'background-color 0.3s ease, color 0.3s ease');\n    document.documentElement.style.setProperty('--theme-background', this.isDarkMode ? '#121212' : '#ffffff');\n    document.documentElement.style.setProperty('--theme-text', this.isDarkMode ? '#ffffff' : '#333333');\n  }\n\n  handleThemeChange(e) {\n    const newIsDarkMode = e.matches;\n    if (this.isDarkMode !== newIsDarkMode) {\n      this.isDarkMode = newIsDarkMode;\n      this.updateCssVariables();\n      this.refreshComponents();\n      this.requestUpdate();\n    }\n  }\n\n  refreshComponents() {\n    document.documentElement.setAttribute('data-theme', this.isDarkMode ? 'dark' : 'light');\n    \n    // Force refresh of key components\n    const backgroundRotator = this.shadowRoot.querySelector('background-rotator');\n    const weatherClock = this.shadowRoot.querySelector('weather-clock');\n    const controls = this.shadowRoot.querySelector('google-controls');\n    \n    if (backgroundRotator) backgroundRotator.requestUpdate();\n    if (weatherClock) weatherClock.requestUpdate();\n    if (controls) controls.requestUpdate();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.startTimeUpdates();\n    // Delay initial night mode check to ensure hass is available\n    setTimeout(() => this.updateNightMode(), 1000);\n    window.addEventListener('resize', this.boundUpdateScreenSize);\n    \n    // Add theme change detection\n    this.themeMediaQuery.addEventListener('change', this.boundHandleThemeChange);\n    \n    // Apply current theme on initial load\n    document.documentElement.setAttribute('data-theme', this.isDarkMode ? 'dark' : 'light');\n    \n    // Force initial refresh to ensure everything loads properly\n    setTimeout(() => {\n      this.updateCssVariables();\n      this.refreshComponents();\n    }, 100);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.clearAllTimers();\n    window.removeEventListener('resize', this.boundUpdateScreenSize);\n    \n    // Remove theme change listener\n    this.themeMediaQuery.removeEventListener('change', this.boundHandleThemeChange);\n    \n    const touchContainer = this.shadowRoot?.querySelector('.touch-container');\n    if (touchContainer) {\n      touchContainer.removeEventListener('touchstart', this.handleTouchStart);\n      touchContainer.removeEventListener('touchmove', this.handleTouchMove);\n      touchContainer.removeEventListener('touchend', this.handleTouchEnd);\n    }\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    \n    const touchContainer = this.shadowRoot.querySelector('.touch-container');\n    if (touchContainer) {\n      touchContainer.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });\n      touchContainer.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });\n      touchContainer.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });\n    }\n  }\n\n  clearAllTimers() {\n    if (this.overlayDismissTimer) clearTimeout(this.overlayDismissTimer);\n    if (this.brightnessCardDismissTimer) clearTimeout(this.brightnessCardDismissTimer);\n    if (this.brightnessStabilizeTimer) clearTimeout(this.brightnessStabilizeTimer);\n    if (this.timeUpdateInterval) clearInterval(this.timeUpdateInterval);\n  }\n\n  updateScreenSize() {\n    const pixelRatio = window.devicePixelRatio || 1;\n    this.screenWidth = Math.round(window.innerWidth * pixelRatio);\n    this.screenHeight = Math.round(window.innerHeight * pixelRatio);\n    this.requestUpdate();\n  }\n\n  startTimeUpdates() {\n    this.updateTime();\n    this.timeUpdateInterval = setInterval(() => {\n      this.updateTime();\n    }, 1000);\n  }\n\n  updateTime() {\n    const now = new Date();\n    this.currentTime = now.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    }).replace(/\\s?[AP]M/, '');\n  }\n\n  handleTouchStart(event) {\n    if (event.touches.length === 1) {\n      this.touchStartY = event.touches[0].clientY;\n      this.touchStartX = event.touches[0].clientX;\n      this.touchStartTime = Date.now();\n    }\n  }\n\n  handleTouchMove(event) {\n    if (event.touches.length === 1) {\n      // Prevent default scroll behavior only when showing UI overlays\n      if (this.showBrightnessCard || this.showOverlay) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  handleTouchEnd(event) {\n    if (event.changedTouches.length === 1) {\n      const deltaY = this.touchStartY - event.changedTouches[0].clientY;\n      const deltaX = this.touchStartX - event.changedTouches[0].clientX;\n      const deltaTime = Date.now() - this.touchStartTime;\n      const velocityY = Math.abs(deltaY) / deltaTime;\n      const velocityX = Math.abs(deltaX) / deltaTime;\n      \n      // If in manually activated night mode, any touch/tap should exit night mode\n      if (this.isNightMode && this.nightModeSource === 'manual') {\n        // Only minor movements should count as taps, not full swipes\n        if (Math.abs(deltaX) < 50 && Math.abs(deltaY) < 50) {\n          this.handleNightModeTransition(false);\n          return;\n        }\n      }\n      \n      // Check for horizontal swipe from left to right (for night mode toggle)\n      if (Math.abs(deltaX) > Math.abs(deltaY) && \n          Math.abs(deltaX) > 50 && \n          velocityX > 0.2 && \n          this.touchStartX < window.innerWidth * 0.2 && // Started from the left edge (20% of screen)\n          deltaX < 0) { // Left to right swipe (negative deltaX)\n        \n        // Toggle night mode with manual source\n        if (!this.isNightMode) {\n          this.handleNightModeTransition(true, 'manual');\n        }\n      }\n      // Check for vertical swipe\n      else if (Math.abs(deltaY) > Math.abs(deltaX) && Math.abs(deltaY) > 50 && velocityY > 0.2) {\n        if (deltaY > 0 && !this.showBrightnessCard && !this.showOverlay) {\n          // Swipe up - show overlay\n          this.handleOverlayToggle(true);\n        } else if (deltaY < 0) {\n          if (this.showBrightnessCard) {\n            this.dismissBrightnessCard();\n          } else if (this.showOverlay) {\n            this.dismissOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  handleOverlayToggle(shouldShow = true) {\n    if (shouldShow && !this.showOverlay) {\n      this.showOverlay = true;\n      this.isOverlayTransitioning = true;\n      \n      // Use requestAnimationFrame for smoother animation\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          this.isOverlayVisible = true;\n          this.startOverlayDismissTimer();\n          this.requestUpdate();\n\n          setTimeout(() => {\n            this.isOverlayTransitioning = false;\n            this.requestUpdate();\n          }, 300);\n        });\n      });\n    } else if (!shouldShow && this.showOverlay) {\n      this.dismissOverlay();\n    }\n  }\n\n  startOverlayDismissTimer() {\n    if (this.overlayDismissTimer) {\n      clearTimeout(this.overlayDismissTimer);\n    }\n    this.overlayDismissTimer = setTimeout(() => {\n      this.dismissOverlay();\n    }, 10000);\n  }\n\n  startBrightnessCardDismissTimer() {\n    if (this.brightnessCardDismissTimer) {\n      clearTimeout(this.brightnessCardDismissTimer);\n    }\n    this.brightnessCardDismissTimer = setTimeout(() => {\n      this.dismissBrightnessCard();\n    }, 10000);\n  }\n\n  dismissOverlay() {\n    if (this.isOverlayTransitioning) return;\n    \n    this.isOverlayTransitioning = true;\n    this.isOverlayVisible = false;\n    \n    if (this.overlayDismissTimer) {\n      clearTimeout(this.overlayDismissTimer);\n    }\n\n    requestAnimationFrame(() => {\n      this.requestUpdate();\n      setTimeout(() => {\n        this.showOverlay = false;\n        this.isOverlayTransitioning = false;\n        this.requestUpdate();\n      }, 300);\n    });\n  }\n\n  dismissBrightnessCard() {\n    if (this.isBrightnessCardTransitioning) return;\n    \n    this.isBrightnessCardTransitioning = true;\n    this.isBrightnessCardVisible = false;\n    \n    if (this.brightnessCardDismissTimer) {\n      clearTimeout(this.brightnessCardDismissTimer);\n    }\n\n    requestAnimationFrame(() => {\n      this.requestUpdate();\n      setTimeout(() => {\n        this.showBrightnessCard = false;\n        this.isBrightnessCardTransitioning = false;\n        this.requestUpdate();\n      }, 300);\n    });\n  }\n\n  // Implement a queue-based approach to prevent rapid brightness updates\n  async updateBrightnessValue(value) {\n    this.isAdjustingBrightness = true;\n    this.visualBrightness = Math.max(1, Math.min(255, Math.round(value)));\n    \n    // Add to update queue\n    this.brightnessUpdateQueue.push(value);\n    \n    // Start processing if not already in progress\n    if (!this.isProcessingBrightnessUpdate) {\n      this.processBrightnessUpdateQueue();\n    }\n    \n    if (this.brightnessStabilizeTimer) {\n      clearTimeout(this.brightnessStabilizeTimer);\n    }\n    \n    this.brightnessStabilizeTimer = setTimeout(() => {\n      this.isAdjustingBrightness = false;\n      this.requestUpdate();\n    }, 2000);\n  }\n\n  async processBrightnessUpdateQueue() {\n    if (this.brightnessUpdateQueue.length === 0) {\n      this.isProcessingBrightnessUpdate = false;\n      return;\n    }\n    \n    this.isProcessingBrightnessUpdate = true;\n    \n    // Take the last value in the queue to skip intermediate values\n    const lastValue = this.brightnessUpdateQueue[this.brightnessUpdateQueue.length - 1];\n    this.brightnessUpdateQueue = [];\n    \n    try {\n      await this.setBrightness(lastValue);\n      this.lastBrightnessUpdateTime = Date.now();\n    } catch (error) {\n      // Error handling without console log\n      this.visualBrightness = this.brightness;\n    }\n    \n    // Process remaining updates after a short delay to prevent rapid updates\n    setTimeout(() => this.processBrightnessUpdateQueue(), 250);\n  }\n\n  async setBrightness(value) {\n    if (!this.hass) return;\n    \n    const brightness = Math.max(1, Math.min(255, Math.round(value)));\n    const deviceName = this.config.device_name || 'mobile_app_liam_s_room_display';\n    \n    await this.hass.callService('notify', deviceName, {\n      message: 'command_screen_brightness_level',\n      data: {\n        command: brightness\n      }\n    });\n\n    await this.hass.callService('notify', deviceName, {\n      message: 'command_update_sensors'\n    });\n\n    await new Promise(resolve => setTimeout(resolve, this.config.sensor_update_delay));\n    \n    this.brightness = brightness;\n    if (!this.isNightMode) {\n      this.previousBrightness = brightness;\n    }\n  }\n\n  async handleNightModeTransition(newNightMode, source = 'sensor') {\n    if (newNightMode === this.isInNightMode && this.nightModeSource === source) return;\n    \n    try {\n      if (newNightMode) {\n        await this.enterNightMode();\n        this.nightModeSource = source;\n      } else {\n        await this.exitNightMode();\n        this.nightModeSource = null;\n      }\n      \n      this.isInNightMode = newNightMode;\n      this.isNightMode = newNightMode;\n      \n      // Update the night-mode component if it exists\n      const nightModeComponent = this.shadowRoot.querySelector('night-mode');\n      if (nightModeComponent) {\n        nightModeComponent.isInNightMode = newNightMode;\n        nightModeComponent.previousBrightness = this.previousBrightness;\n        nightModeComponent.nightModeSource = this.nightModeSource;\n      }\n      \n      this.requestUpdate();\n    } catch (error) {\n      // Restore previous state on error\n      this.isInNightMode = !newNightMode;\n      this.isNightMode = !newNightMode;\n      this.requestUpdate();\n    }\n  }\n\n  async enterNightMode() {\n    // Save current brightness, but only if it's not already saved and reasonable\n    if (!this.isInNightMode && this.brightness > MIN_BRIGHTNESS) {\n      this.previousBrightness = this.brightness;\n    }\n    \n    const deviceName = this.config.device_name || 'mobile_app_liam_s_room_display';\n    \n    try {\n      // First disable auto brightness\n      await this.hass.callService('notify', deviceName, {\n        message: 'command_auto_screen_brightness',\n        data: {\n          command: 'turn_off'\n        }\n      });\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      // Set to minimum brightness\n      await this.setBrightness(MIN_BRIGHTNESS);\n      \n      // Then enable auto brightness for night mode\n      await new Promise(resolve => setTimeout(resolve, 200));\n      await this.hass.callService('notify', deviceName, {\n        message: 'command_auto_screen_brightness',\n        data: {\n          command: 'turn_on'\n        }\n      });\n    } catch (error) {\n      console.error(\"Error entering night mode:\", error);\n      throw error;\n    }\n  }\n\n  async exitNightMode() {\n    const deviceName = this.config.device_name || 'mobile_app_liam_s_room_display';\n    \n    try {\n      // First disable auto brightness\n      await this.hass.callService('notify', deviceName, {\n        message: 'command_auto_screen_brightness',\n        data: {\n          command: 'turn_off'\n        }\n      });\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      // Restore previous brightness or use a reasonable default\n      const restoreBrightness = (this.previousBrightness && this.previousBrightness > MIN_BRIGHTNESS) \n        ? this.previousBrightness \n        : 128;\n      \n      await this.setBrightness(restoreBrightness);\n      \n      // Keep auto brightness disabled after exiting night mode\n    } catch (error) {\n      console.error(\"Error exiting night mode:\", error);\n      throw error;\n    }\n  }\n\n  handleBrightnessCardToggle(event) {\n    const shouldShow = event.detail;\n    \n    if (shouldShow && !this.showBrightnessCard) {\n      // Hide overlay first if showing\n      if (this.showOverlay) {\n        this.isOverlayVisible = false;\n        this.showOverlay = false;\n        this.isOverlayTransitioning = false;\n        \n        if (this.overlayDismissTimer) {\n          clearTimeout(this.overlayDismissTimer);\n        }\n      }\n\n      // Then show brightness card\n      this.showBrightnessCard = true;\n      this.isBrightnessCardTransitioning = true;\n      \n      requestAnimationFrame(() => {\n        this.isBrightnessCardVisible = true;\n        this.startBrightnessCardDismissTimer();\n        this.requestUpdate();\n        \n        setTimeout(() => {\n          this.isBrightnessCardTransitioning = false;\n          this.requestUpdate();\n        }, 300);\n      });\n    } else if (!shouldShow && this.showBrightnessCard) {\n      this.dismissBrightnessCard();\n    }\n  }\n\n  handleBrightnessChange(event) {\n    this.updateBrightnessValue(event.detail);\n    // Reset dismiss timer when user interacts with brightness\n    this.startBrightnessCardDismissTimer();\n  }\n\n  handleDebugToggle() {\n    this.showDebugInfo = !this.showDebugInfo;\n    this.requestUpdate();\n  }\n\n  handleNightModeExit() {\n    this.isNightMode = false;\n    this.requestUpdate();\n  }\n\n  updateNightMode() {\n    if (!this.hass) return;\n    \n    const lightSensorEntity = this.config.light_sensor_entity || 'sensor.liam_room_display_light_sensor';\n    const lightSensor = this.hass.states[lightSensorEntity];\n    if (!lightSensor) {\n      return;\n    }\n\n    const sensorState = lightSensor.state;\n    if (sensorState === 'unavailable' || sensorState === 'unknown') {\n      return;\n    }\n\n    const shouldBeInNightMode = parseInt(sensorState) === 0;\n    \n    // If night mode was manually activated, don't let sensor readings deactivate it\n    if (this.isInNightMode && this.nightModeSource === 'manual') {\n      // Keep night mode on regardless of sensor\n      return;\n    }\n    \n    // Otherwise, follow sensor readings for automatic night mode\n    if (shouldBeInNightMode !== this.isInNightMode) {\n      this.handleNightModeTransition(shouldBeInNightMode, 'sensor');\n    }\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('hass') && this.hass && !this.isAdjustingBrightness) {\n      const timeSinceLastUpdate = Date.now() - this.lastBrightnessUpdateTime;\n      if (timeSinceLastUpdate > 2000) {\n        this.updateNightMode();\n      }\n    }\n  }\n\n  render() {\n    const mainContent = this.isNightMode ? html`\n      <night-mode \n        .currentTime=${this.currentTime}\n        .hass=${this.hass}\n        .config=${this.config}\n        .brightness=${this.brightness}\n        .previousBrightness=${this.previousBrightness}\n        .isInNightMode=${this.isInNightMode}\n        .nightModeSource=${this.nightModeSource}\n        @nightModeExit=${this.handleNightModeExit}\n      ></night-mode>\n    ` : html`\n      <background-rotator\n        .hass=${this.hass}\n        .config=${this.config}\n        .screenWidth=${this.screenWidth}\n        .screenHeight=${this.screenHeight}\n      ></background-rotator>\n\n      <weather-clock \n        .hass=${this.hass}\n        .config=${this.config}\n      ></weather-clock>\n\n      <google-controls\n        .hass=${this.hass}\n        .config=${this.config}\n        .showOverlay=${this.showOverlay}\n        .isOverlayVisible=${this.isOverlayVisible}\n        .isOverlayTransitioning=${this.isOverlayTransitioning}\n        .showBrightnessCard=${this.showBrightnessCard}\n        .isBrightnessCardVisible=${this.isBrightnessCardVisible}\n        .isBrightnessCardTransitioning=${this.isBrightnessCardTransitioning}\n        .brightness=${this.brightness}\n        .visualBrightness=${this.visualBrightness}\n        .isAdjustingBrightness=${this.isAdjustingBrightness}\n        @overlayToggle=${this.handleOverlayToggle}\n        @brightnessCardToggle=${this.handleBrightnessCardToggle}\n        @brightnessChange=${this.handleBrightnessChange}\n        @debugToggle=${this.handleDebugToggle}\n      ></google-controls>\n    `;\n\n    return html`\n      <!-- Import all required fonts -->\n      <link href=\"https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600&display=swap\" rel=\"stylesheet\" crossorigin=\"anonymous\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Product+Sans:wght@400;500&display=swap\" rel=\"stylesheet\" crossorigin=\"anonymous\">\n      \n      <!-- Fallback font style for Product Sans -->\n      <style>\n        @font-face {\n          font-family: 'Product Sans Regular';\n          src: local('Product Sans'), local('Product Sans Regular'), local('ProductSans-Regular'), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format('woff2');\n          font-weight: 400;\n          font-style: normal;\n          font-display: swap;\n        }\n      </style>\n      \n      <div class=\"touch-container\">\n        <div class=\"content-wrapper\">\n          ${mainContent}\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('google-card', GoogleCard);\n\n// Make GoogleCard available to the outside world\nwindow.customCards = window.customCards || [];\nwindow.customCards.push({\n  type: \"google-card\",\n  name: \"Google Card\",\n  description: \"A card that mimics Google's UI for photo frame displays\",\n  preview: true\n});\n"],"names":["DEFAULT_CONFIG","image_url","display_time","crossfade_time","image_fit","image_list_update_interval","image_order","show_debug","sensor_update_delay","device_name","show_date","show_time","show_weather","show_aqi","weather_entity","aqi_entity","light_sensor_entity","brightness_sensor_entity","IMAGE_SOURCE_TYPES","sharedStyles","css","customElements","define","BackgroundRotator","LitElement","properties","hass","type","Object","config","screenWidth","Number","screenHeight","currentImageIndex","imageList","Array","imageA","String","imageB","activeImage","isTransitioning","Boolean","error","styles","constructor","super","this","preloadedImage","connectedCallback","updateImageList","then","startImageRotation","disconnectedCallback","imageUpdateInterval","clearInterval","imageListUpdateInterval","setTimeout","updateImage","setInterval","Math","max","getImageSourceType","startsWith","includes","getImageUrl","timestamp_ms","Date","now","timestamp","floor","width","height","replace","requestUpdate","newImageList","fetchImageList","isArray","length","Error","shuffleArray","sort","preloadImage","message","array","i","j","random","getImagesFromMediaSource","getImagesFromUnsplashAPI","getImagesFromImmichAPI","from","url","mediaContentId","result","callWS","media_content_id","children","filter","child","media_class","map","console","fallback","response","fetch","ok","status","data","json","image","urls","regular","immich_api_key","apiUrl","headers","albums","imagePromises","async","album","albumResponse","id","albumData","assets","asset","Promise","all","flat","resolve","reject","img","Image","timeout","onload","clearTimeout","onerror","src","nextImageIndex","nextImage","transitionTime","render","imageAOpacity","imageBOpacity","imageFit","html","GoogleCard","showDebugInfo","showOverlay","isOverlayVisible","isOverlayTransitioning","brightness","visualBrightness","showBrightnessCard","isBrightnessCardVisible","isBrightnessCardTransitioning","isNightMode","currentTime","isInNightMode","previousBrightness","isAdjustingBrightness","lastBrightnessUpdateTime","touchStartY","touchStartX","touchStartTime","isDarkMode","initializeProperties","boundUpdateScreenSize","updateScreenSize","bind","brightnessUpdateQueue","isProcessingBrightnessUpdate","window","matchMedia","matches","themeMediaQuery","boundHandleThemeChange","handleThemeChange","handleBrightnessCardToggle","handleBrightnessChange","handleDebugToggle","handleNightModeExit","overlayDismissTimer","brightnessCardDismissTimer","brightnessStabilizeTimer","timeUpdateInterval","nightModeSource","updateTime","getConfigElement","document","createElement","getStubConfig","setConfig","updateCssVariables","style","setProperty","documentElement","e","newIsDarkMode","refreshComponents","setAttribute","backgroundRotator","shadowRoot","querySelector","weatherClock","controls","startTimeUpdates","updateNightMode","addEventListener","clearAllTimers","removeEventListener","touchContainer","handleTouchStart","handleTouchMove","handleTouchEnd","firstUpdated","passive","pixelRatio","devicePixelRatio","round","innerWidth","innerHeight","toLocaleTimeString","hour","minute","hour12","event","touches","clientY","clientX","preventDefault","changedTouches","deltaY","deltaX","deltaTime","velocityY","abs","velocityX","handleNightModeTransition","handleOverlayToggle","dismissBrightnessCard","dismissOverlay","shouldShow","requestAnimationFrame","startOverlayDismissTimer","startBrightnessCardDismissTimer","updateBrightnessValue","value","min","push","processBrightnessUpdateQueue","lastValue","setBrightness","deviceName","callService","command","newNightMode","source","enterNightMode","exitNightMode","nightModeComponent","restoreBrightness","detail","lightSensorEntity","lightSensor","states","sensorState","state","shouldBeInNightMode","parseInt","updated","changedProperties","has","mainContent","customCards","name","description","preview"],"mappings":"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"}