{"version":3,"file":"BackgroundRotator.js","sources":["../../src/components/BackgroundRotator.js"],"sourcesContent":["// src/components/BackgroundRotator.js\nimport { LitElement, html } from 'https://unpkg.com/lit-element@2.4.0/lit-element.js?module';\nimport { backgroundRotatorStyles } from '../styles/BackgroundRotatorStyles';\nimport { sharedStyles } from '../styles/SharedStyles';\nimport { TRANSITION_BUFFER, IMAGE_SOURCE_TYPES } from '../constants';\n\nexport class BackgroundRotator extends LitElement {\n  static get properties() {\n    return {\n      hass: { type: Object },\n      config: { type: Object },\n      screenWidth: { type: Number },\n      screenHeight: { type: Number },\n      showDebugInfo: { type: Boolean },\n      currentImageIndex: { type: Number },\n      imageList: { type: Array },\n      imageA: { type: String },\n      imageB: { type: String },\n      activeImage: { type: String },\n      preloadedImage: { type: String },\n      error: { type: String },\n      debugInfo: { type: Object },\n      isTransitioning: { type: Boolean },\n    };\n  }\n\n  static get styles() {\n    return [backgroundRotatorStyles, sharedStyles];\n  }\n\n  constructor() {\n    super();\n    this.initializeProperties();\n  }\n\n  initializeProperties() {\n    this.currentImageIndex = -1;\n    this.imageList = [];\n    this.imageA = '';\n    this.imageB = '';\n    this.activeImage = 'A';\n    this.preloadedImage = '';\n    this.error = null;\n    this.debugInfo = {};\n    this.isTransitioning = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.startImageRotation();\n    this.startImageListUpdates();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.clearTimers();\n  }\n\n  clearTimers() {\n    clearInterval(this.imageUpdateInterval);\n    clearInterval(this.imageListUpdateInterval);\n  }\n\n  startImageListUpdates() {\n    this.updateImageList();\n    this.imageListUpdateInterval = setInterval(() => {\n      this.updateImageList();\n    }, this.config.image_list_update_interval * 1000);\n  }\n\n  startImageRotation() {\n    this.updateImage();\n    this.imageUpdateInterval = setInterval(() => {\n      this.updateImage();\n    }, this.config.display_time * 1000);\n  }\n\n  getImageSourceType() {\n    const { image_url } = this.config;\n    if (image_url.startsWith('media-source://')) return IMAGE_SOURCE_TYPES.MEDIA_SOURCE;\n    if (image_url.startsWith('https://api.unsplash')) return IMAGE_SOURCE_TYPES.UNSPLASH_API;\n    if (image_url.startsWith('immich+')) return IMAGE_SOURCE_TYPES.IMMICH_API;\n    if (image_url.includes('picsum.photos')) return IMAGE_SOURCE_TYPES.PICSUM;\n    return IMAGE_SOURCE_TYPES.URL;\n  }\n\n  getImageUrl() {\n    const timestamp_ms = Date.now();\n    const timestamp = Math.floor(timestamp_ms / 1000);\n    return this.config.image_url\n      .replace(/\\${width}/g, this.screenWidth)\n      .replace(/\\${height}/g, this.screenHeight)\n      .replace(/\\${timestamp_ms}/g, timestamp_ms)\n      .replace(/\\${timestamp}/g, timestamp);\n  }\n\n  async updateImageList() {\n    if (!this.screenWidth || !this.screenHeight) {\n      this.error = 'Screen dimensions not set';\n      this.requestUpdate();\n      return;\n    }\n\n    try {\n      const newImageList = await this.fetchImageList();\n      this.imageList =\n        this.config.image_order === 'random'\n          ? newImageList.sort(() => 0.5 - Math.random())\n          : newImageList.sort();\n\n      this.error = null;\n      this.debugInfo.imageList = this.imageList;\n    } catch (error) {\n      this.error = `Error updating image list: ${error.message}`;\n    }\n    this.requestUpdate();\n  }\n\n  async fetchImageList() {\n    const sourceType = this.getImageSourceType();\n    switch (sourceType) {\n      case IMAGE_SOURCE_TYPES.MEDIA_SOURCE:\n        return this.getImagesFromMediaSource();\n      case IMAGE_SOURCE_TYPES.UNSPLASH_API:\n        return this.getImagesFromUnsplashAPI();\n      case IMAGE_SOURCE_TYPES.IMMICH_API:\n        return this.getImagesFromImmichAPI();\n      default:\n        return [this.getImageUrl()];\n    }\n  }\n\n  async getImagesFromMediaSource() {\n    try {\n      const mediaContentId = this.config.image_url.replace(/^media-source:\\/\\//, '');\n      const result = await this.hass.callWS({\n        type: 'media_source/browse_media',\n        media_content_id: mediaContentId,\n      });\n      return result.children\n        .filter((child) => child.media_class === 'image')\n        .map((child) => child.media_content_id);\n    } catch (error) {\n      console.error('Error fetching images from media source:', error);\n      return [this.getImageUrl()];\n    }\n  }\n\n  async getImagesFromUnsplashAPI() {\n    try {\n      const response = await fetch(`${this.config.image_url}&count=30`);\n      const data = await response.json();\n      return data.map((image) => image.urls.regular);\n    } catch (error) {\n      console.error('Error fetching images from Unsplash API:', error);\n      return [this.getImageUrl()];\n    }\n  }\n\n  async getImagesFromImmichAPI() {\n    try {\n      const apiUrl = this.config.image_url.replace(/^immich\\+/, '');\n      const response = await fetch(`${apiUrl}/albums`, {\n        headers: {\n          'x-api-key': this.config.immich_api_key,\n        },\n      });\n      const albums = await response.json();\n\n      const imagePromises = albums.map(async (album) => {\n        const albumResponse = await fetch(`${apiUrl}/albums/${album.id}`, {\n          headers: {\n            'x-api-key': this.config.immich_api_key,\n          },\n        });\n        const albumData = await albumResponse.json();\n        return albumData.assets\n          .filter((asset) => asset.type === 'IMAGE')\n          .map((asset) => `${apiUrl}/assets/${asset.id}/original`);\n      });\n\n      return (await Promise.all(imagePromises)).flat();\n    } catch (error) {\n      console.error('Error fetching images from Immich API:', error);\n      return [this.getImageUrl()];\n    }\n  }\n\n  async preloadImage(url) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => resolve(url);\n      img.onerror = () => reject(new Error(`Failed to load image: ${url}`));\n      img.src = url;\n    });\n  }\n\n  async preloadNextImage() {\n    const nextImageToPreload =\n      this.getImageSourceType() === IMAGE_SOURCE_TYPES.PICSUM\n        ? this.getImageUrl()\n        : this.imageList[(this.currentImageIndex + 1) % this.imageList.length];\n\n    try {\n      this.preloadedImage = await this.preloadImage(nextImageToPreload);\n    } catch (error) {\n      console.error('Error preloading next image:', error);\n      this.preloadedImage = '';\n    }\n  }\n\n  async getNextImage() {\n    let newImage;\n    if (this.preloadedImage) {\n      newImage = this.preloadedImage;\n      this.preloadedImage = '';\n    } else {\n      if (this.getImageSourceType() === IMAGE_SOURCE_TYPES.PICSUM) {\n        newImage = this.getImageUrl();\n      } else {\n        this.currentImageIndex = (this.currentImageIndex + 1) % this.imageList.length;\n        newImage = this.imageList[this.currentImageIndex];\n      }\n      newImage = await this.preloadImage(newImage);\n    }\n    return newImage;\n  }\n\n  async updateImage() {\n    if (this.isTransitioning) return;\n\n    try {\n      const newImage = await this.getNextImage();\n      await this.transitionToNewImage(newImage);\n      this.preloadNextImage();\n    } catch (error) {\n      console.error('Error updating image:', error);\n    }\n  }\n\n  async transitionToNewImage(newImage) {\n    this.isTransitioning = true;\n\n    if (this.activeImage === 'A') {\n      this.imageB = newImage;\n    } else {\n      this.imageA = newImage;\n    }\n\n    this.updateDebugInfo();\n    this.requestUpdate();\n\n    await new Promise((resolve) => setTimeout(resolve, TRANSITION_BUFFER));\n    this.activeImage = this.activeImage === 'A' ? 'B' : 'A';\n    this.requestUpdate();\n\n    await new Promise((resolve) =>\n      setTimeout(resolve, this.config.crossfade_time * 1000 + TRANSITION_BUFFER)\n    );\n    this.isTransitioning = false;\n  }\n\n  updateDebugInfo() {\n    this.debugInfo = {\n      imageA: this.imageA,\n      imageB: this.imageB,\n      activeImage: this.activeImage,\n      preloadedImage: this.preloadedImage,\n      imageList: this.imageList,\n      currentImageIndex: this.currentImageIndex,\n      config: this.config,\n      error: this.error,\n    };\n  }\n\n  renderBackgroundImages() {\n    const imageAOpacity = this.activeImage === 'A' ? 1 : 0;\n    const imageBOpacity = this.activeImage === 'B' ? 1 : 0;\n\n    return html`\n      <div class=\"background-container\">\n        <div\n          class=\"background-image\"\n          style=\"background-image: url('${this.imageA}'); \n                    opacity: ${imageAOpacity};\"\n        ></div>\n        <div\n          class=\"background-image\"\n          style=\"background-image: url('${this.imageB}'); \n                    opacity: ${imageBOpacity};\"\n        ></div>\n      </div>\n    `;\n  }\n\n  renderDebugInfo() {\n    return html`\n      <div class=\"debug-info\">\n        <h2>Background Rotator Debug Info</h2>\n        <p><strong>Screen Width:</strong> ${this.screenWidth}</p>\n        <p><strong>Screen Height:</strong> ${this.screenHeight}</p>\n        <p><strong>Device Pixel Ratio:</strong> ${window.devicePixelRatio || 1}</p>\n        <p><strong>Image A:</strong> ${this.imageA}</p>\n        <p><strong>Image B:</strong> ${this.imageB}</p>\n        <p><strong>Active Image:</strong> ${this.activeImage}</p>\n        <p><strong>Preloaded Image:</strong> ${this.preloadedImage}</p>\n        <p><strong>Is Transitioning:</strong> ${this.isTransitioning}</p>\n        <p><strong>Current Image Index:</strong> ${this.currentImageIndex}</p>\n        <p><strong>Error:</strong> ${this.error}</p>\n        <h3>Image List:</h3>\n        <pre>${JSON.stringify(this.imageList, null, 2)}</pre>\n        <h3>Config:</h3>\n        <pre>${JSON.stringify(this.config, null, 2)}</pre>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      ${this.renderBackgroundImages()}\n      ${this.error ? html`<div class=\"error\">${this.error}</div>` : ''}\n      ${this.showDebugInfo ? this.renderDebugInfo() : ''}\n    `;\n  }\n}\n\ncustomElements.define('background-rotator', BackgroundRotator);\n"],"names":["BackgroundRotator","LitElement","properties","hass","type","Object","config","screenWidth","Number","screenHeight","showDebugInfo","Boolean","currentImageIndex","imageList","Array","imageA","String","imageB","activeImage","preloadedImage","error","debugInfo","isTransitioning","styles","backgroundRotatorStyles","sharedStyles","constructor","super","this","initializeProperties","connectedCallback","startImageRotation","startImageListUpdates","disconnectedCallback","clearTimers","clearInterval","imageUpdateInterval","imageListUpdateInterval","updateImageList","setInterval","image_list_update_interval","updateImage","display_time","getImageSourceType","image_url","startsWith","IMAGE_SOURCE_TYPES","MEDIA_SOURCE","UNSPLASH_API","IMMICH_API","includes","PICSUM","URL","getImageUrl","timestamp_ms","Date","now","timestamp","Math","floor","replace","requestUpdate","newImageList","fetchImageList","image_order","sort","random","message","getImagesFromMediaSource","getImagesFromUnsplashAPI","getImagesFromImmichAPI","mediaContentId","callWS","media_content_id","children","filter","child","media_class","map","console","response","fetch","json","image","urls","regular","apiUrl","headers","immich_api_key","imagePromises","async","album","albumResponse","id","assets","asset","Promise","all","flat","preloadImage","url","resolve","reject","img","Image","onload","onerror","Error","src","preloadNextImage","nextImageToPreload","length","getNextImage","newImage","transitionToNewImage","updateDebugInfo","setTimeout","TRANSITION_BUFFER","crossfade_time","renderBackgroundImages","imageAOpacity","imageBOpacity","html","renderDebugInfo","window","devicePixelRatio","JSON","stringify","render","customElements","define"],"mappings":"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"}