{"version":3,"file":"NightMode.js","sources":["../../src/components/NightMode.js"],"sourcesContent":["// src/components/NightMode.js\nimport { LitElement, html } from 'https://unpkg.com/lit-element@2.4.0/lit-element.js?module';\nimport { nightModeStyles } from '../styles/NightModeStyles';\nimport { sharedStyles } from '../styles/SharedStyles';\nimport {\n  NIGHT_MODE_TRANSITION_DELAY,\n  MIN_BRIGHTNESS,\n  DEFAULT_SENSOR_UPDATE_DELAY,\n} from '../constants';\n\nexport class NightMode extends LitElement {\n  static get properties() {\n    return {\n      hass: { type: Object },\n      currentTime: { type: String },\n      brightness: { type: Number },\n      isInNightMode: { type: Boolean },\n      previousBrightness: { type: Number },\n    };\n  }\n\n  static get styles() {\n    return [sharedStyles, nightModeStyles];\n  }\n\n  constructor() {\n    super();\n    this.initializeProperties();\n    this.timeUpdateInterval = null;\n  }\n\n  initializeProperties() {\n    this.currentTime = '';\n    this.brightness = MIN_BRIGHTNESS;\n    this.isInNightMode = false;\n    this.previousBrightness = MIN_BRIGHTNESS;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.updateTime();\n    this.startTimeUpdates();\n    this.enterNightMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.timeUpdateInterval) {\n      clearInterval(this.timeUpdateInterval);\n    }\n  }\n\n  startTimeUpdates() {\n    this.timeUpdateInterval = setInterval(() => {\n      this.updateTime();\n    }, 1000);\n  }\n\n  updateTime() {\n    const now = new Date();\n    this.currentTime = now\n      .toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true,\n      })\n      .replace(/\\s?[AP]M/, '');\n  }\n\n  async enterNightMode() {\n    if (this.isInNightMode) return;\n\n    try {\n      await this.toggleAutoBrightness(false);\n      await new Promise((resolve) => setTimeout(resolve, NIGHT_MODE_TRANSITION_DELAY));\n      await this.setBrightness(MIN_BRIGHTNESS);\n      await new Promise((resolve) => setTimeout(resolve, NIGHT_MODE_TRANSITION_DELAY));\n      await this.toggleAutoBrightness(true);\n\n      this.isInNightMode = true;\n      this.requestUpdate();\n    } catch (error) {\n      console.error('Error entering night mode:', error);\n    }\n  }\n\n  async exitNightMode() {\n    if (!this.isInNightMode) return;\n\n    try {\n      await this.toggleAutoBrightness(false);\n      await new Promise((resolve) => setTimeout(resolve, NIGHT_MODE_TRANSITION_DELAY));\n      await this.setBrightness(this.previousBrightness);\n\n      this.isInNightMode = false;\n      this.requestUpdate();\n\n      // Dispatch event to notify parent that night mode has ended\n      this.dispatchEvent(new CustomEvent('nightModeExit'));\n    } catch (error) {\n      console.error('Error exiting night mode:', error);\n    }\n  }\n\n  async setBrightness(value) {\n    if (!this.hass) return;\n\n    try {\n      await this.hass.callService('notify', 'mobile_app_liam_s_room_display', {\n        message: 'command_screen_brightness_level',\n        data: {\n          command: value,\n        },\n      });\n\n      await this.hass.callService('notify', 'mobile_app_liam_s_room_display', {\n        message: 'command_update_sensors',\n      });\n\n      await new Promise((resolve) => setTimeout(resolve, DEFAULT_SENSOR_UPDATE_DELAY));\n\n      this.brightness = value;\n      this.requestUpdate();\n    } catch (error) {\n      console.error('Error setting brightness:', error);\n    }\n  }\n\n  async toggleAutoBrightness(enabled) {\n    if (!this.hass) return;\n\n    try {\n      await this.hass.callService('notify', 'mobile_app_liam_s_room_display', {\n        message: 'command_auto_screen_brightness',\n        data: {\n          command: enabled ? 'turn_on' : 'turn_off',\n        },\n      });\n    } catch (error) {\n      console.error('Error toggling auto brightness:', error);\n    }\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('hass')) {\n      this.checkLightSensor();\n    }\n  }\n\n  checkLightSensor() {\n    if (!this.hass?.states['sensor.liam_room_display_light_sensor']) return;\n\n    const lightSensor = this.hass.states['sensor.liam_room_display_light_sensor'];\n    const shouldBeInNightMode = parseInt(lightSensor.state) === 0;\n\n    if (shouldBeInNightMode && !this.isInNightMode) {\n      this.previousBrightness = this.brightness;\n      this.enterNightMode();\n    } else if (!shouldBeInNightMode && this.isInNightMode) {\n      this.exitNightMode();\n    }\n  }\n\n  render() {\n    return html`\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Rubik:wght@300;400&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <div class=\"night-mode\">\n        <div class=\"night-time\">${this.currentTime}</div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('night-mode', NightMode);\n"],"names":["NightMode","LitElement","properties","hass","type","Object","currentTime","String","brightness","Number","isInNightMode","Boolean","previousBrightness","styles","sharedStyles","nightModeStyles","constructor","super","this","initializeProperties","timeUpdateInterval","MIN_BRIGHTNESS","connectedCallback","updateTime","startTimeUpdates","enterNightMode","disconnectedCallback","clearInterval","setInterval","now","Date","toLocaleTimeString","hour","minute","hour12","replace","toggleAutoBrightness","Promise","resolve","setTimeout","NIGHT_MODE_TRANSITION_DELAY","setBrightness","requestUpdate","error","console","exitNightMode","dispatchEvent","CustomEvent","value","callService","message","data","command","DEFAULT_SENSOR_UPDATE_DELAY","enabled","updated","changedProperties","has","checkLightSensor","states","lightSensor","shouldBeInNightMode","parseInt","state","render","html","customElements","define"],"mappings":"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"}