{"version":3,"file":"Controls.js","sources":["../../src/components/Controls.js"],"sourcesContent":["// src/components/Controls.js\nimport { LitElement, html } from 'https://unpkg.com/lit-element@2.4.0/lit-element.js?module';\nimport { controlsStyles } from '../styles/ControlsStyles';\nimport { sharedStyles } from '../styles/SharedStyles';\nimport {\n  OVERLAY_DISMISS_TIMEOUT,\n  LONG_PRESS_TIMEOUT,\n  BRIGHTNESS_DEBOUNCE_DELAY,\n  BRIGHTNESS_STABILIZE_DELAY,\n  MIN_BRIGHTNESS,\n  MAX_BRIGHTNESS,\n  SWIPE_THRESHOLD,\n  DEFAULT_SENSOR_UPDATE_DELAY,\n} from '../constants';\n\nexport class Controls extends LitElement {\n  static get properties() {\n    return {\n      hass: { type: Object },\n      showOverlay: { type: Boolean },\n      showBrightnessCard: { type: Boolean },\n      brightnessCardTransition: { type: String },\n      brightness: { type: Number },\n      visualBrightness: { type: Number },\n      isAdjustingBrightness: { type: Boolean },\n      touchStartY: { type: Number },\n      lastBrightnessUpdateTime: { type: Number },\n    };\n  }\n\n  static get styles() {\n    return [controlsStyles, sharedStyles];\n  }\n\n  constructor() {\n    super();\n    this.initializeProperties();\n    this.setupEventListeners();\n  }\n\n  initializeProperties() {\n    this.showOverlay = false;\n    this.showBrightnessCard = false;\n    this.brightnessCardTransition = 'none';\n    this.brightness = 128;\n    this.visualBrightness = 128;\n    this.isAdjustingBrightness = false;\n    this.lastBrightnessUpdateTime = 0;\n  }\n\n  setupEventListeners() {\n    this.addEventListener('touchstart', this.handleTouchStart.bind(this));\n    this.addEventListener('touchmove', this.handleTouchMove.bind(this));\n    this.addEventListener('touchend', this.handleTouchEnd.bind(this));\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.clearAllTimers();\n  }\n\n  clearAllTimers() {\n    this.clearOverlayDismissTimer();\n    this.clearBrightnessCardDismissTimer();\n    if (this.brightnessUpdateTimer) {\n      clearTimeout(this.brightnessUpdateTimer);\n    }\n    if (this.brightnessStabilizeTimer) {\n      clearTimeout(this.brightnessStabilizeTimer);\n    }\n    if (this.longPressTimer) {\n      clearTimeout(this.longPressTimer);\n    }\n  }\n\n  // Touch Event Handlers\n  handleTouchStart(event) {\n    event.preventDefault();\n    this.touchStartY = event.touches[0].clientY;\n  }\n\n  handleTouchMove(event) {\n    event.preventDefault();\n  }\n\n  handleTouchEnd(event) {\n    const deltaY = this.touchStartY - event.changedTouches[0].clientY;\n\n    if (deltaY > SWIPE_THRESHOLD && !this.showBrightnessCard) {\n      this.showOverlay = true;\n      this.dispatchEvent(new CustomEvent('overlayToggle', { detail: true }));\n      this.startOverlayDismissTimer();\n    } else if (deltaY < -SWIPE_THRESHOLD) {\n      this.showBrightnessCard ? this.dismissBrightnessCard() : this.dismissOverlay();\n    }\n  }\n\n  // Timer Management\n  startOverlayDismissTimer() {\n    this.clearOverlayDismissTimer();\n    this.overlayDismissTimer = setTimeout(() => {\n      this.dismissOverlay();\n    }, OVERLAY_DISMISS_TIMEOUT);\n  }\n\n  clearOverlayDismissTimer() {\n    if (this.overlayDismissTimer) {\n      clearTimeout(this.overlayDismissTimer);\n      this.overlayDismissTimer = null;\n    }\n  }\n\n  startBrightnessCardDismissTimer() {\n    this.clearBrightnessCardDismissTimer();\n    this.brightnessCardDismissTimer = setTimeout(() => {\n      this.dismissBrightnessCard();\n    }, OVERLAY_DISMISS_TIMEOUT);\n  }\n\n  clearBrightnessCardDismissTimer() {\n    if (this.brightnessCardDismissTimer) {\n      clearTimeout(this.brightnessCardDismissTimer);\n      this.brightnessCardDismissTimer = null;\n    }\n  }\n\n  // UI State Management\n  dismissOverlay() {\n    this.showOverlay = false;\n    this.clearOverlayDismissTimer();\n    this.dispatchEvent(new CustomEvent('overlayToggle', { detail: false }));\n  }\n\n  toggleBrightnessCard() {\n    if (!this.showBrightnessCard) {\n      this.showOverlay = false;\n      this.brightnessCardTransition = 'none';\n      this.showBrightnessCard = true;\n      this.dispatchEvent(new CustomEvent('overlayToggle', { detail: false }));\n      this.dispatchEvent(new CustomEvent('brightnessCardToggle', { detail: true }));\n      this.startBrightnessCardDismissTimer();\n    } else {\n      this.dismissBrightnessCard();\n    }\n  }\n\n  dismissBrightnessCard() {\n    this.brightnessCardTransition = 'transform 0.3s ease-in-out';\n    this.showBrightnessCard = false;\n    this.clearBrightnessCardDismissTimer();\n    this.dispatchEvent(new CustomEvent('brightnessCardToggle', { detail: false }));\n  }\n\n  // Brightness Control\n  async handleBrightnessChange(e) {\n    const clickedDot = e.target.closest('.brightness-dot');\n    if (!clickedDot) return;\n\n    const newBrightness = parseInt(clickedDot.dataset.value);\n    await this.updateBrightnessValue(newBrightness * 25.5);\n  }\n\n  async handleBrightnessDrag(e) {\n    const container = this.shadowRoot.querySelector('.brightness-dots');\n    const rect = container.getBoundingClientRect();\n    const x = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;\n    const relativeX = Math.max(0, Math.min(x - rect.left, rect.width));\n    const newValue = Math.round((relativeX / rect.width) * 10);\n    await this.updateBrightnessValue(newValue * 25.5);\n  }\n\n  async updateBrightnessValue(value) {\n    this.isAdjustingBrightness = true;\n    this.visualBrightness = Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, Math.round(value)));\n    this.dispatchEvent(new CustomEvent('brightnessChange', { detail: this.visualBrightness }));\n\n    if (this.brightnessUpdateTimer) {\n      clearTimeout(this.brightnessUpdateTimer);\n    }\n    if (this.brightnessStabilizeTimer) {\n      clearTimeout(this.brightnessStabilizeTimer);\n    }\n\n    this.brightnessUpdateTimer = setTimeout(async () => {\n      await this.setBrightness(value);\n      this.lastBrightnessUpdateTime = Date.now();\n\n      this.brightnessStabilizeTimer = setTimeout(() => {\n        this.isAdjustingBrightness = false;\n      }, BRIGHTNESS_STABILIZE_DELAY);\n    }, BRIGHTNESS_DEBOUNCE_DELAY);\n  }\n\n  async setBrightness(value) {\n    const internalValue = Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, Math.round(value)));\n\n    try {\n      await this.hass.callService('notify', 'mobile_app_liam_s_room_display', {\n        message: 'command_screen_brightness_level',\n        data: {\n          command: internalValue,\n        },\n      });\n\n      await this.hass.callService('notify', 'mobile_app_liam_s_room_display', {\n        message: 'command_update_sensors',\n      });\n\n      await new Promise((resolve) => setTimeout(resolve, DEFAULT_SENSOR_UPDATE_DELAY));\n\n      this.brightness = internalValue;\n    } catch (error) {\n      console.error('Error setting brightness:', error);\n      this.visualBrightness = this.brightness;\n    }\n\n    this.startBrightnessCardDismissTimer();\n  }\n\n  // Debug Toggle\n  handleSettingsIconTouchStart() {\n    this.longPressTimer = setTimeout(() => {\n      this.dispatchEvent(new CustomEvent('debugToggle'));\n    }, LONG_PRESS_TIMEOUT);\n  }\n\n  handleSettingsIconTouchEnd() {\n    if (this.longPressTimer) {\n      clearTimeout(this.longPressTimer);\n    }\n  }\n\n  getBrightnessDisplayValue() {\n    return Math.round(this.visualBrightness / 25.5);\n  }\n\n  // Render Methods\n  renderOverlay() {\n    return html`\n      <div class=\"overlay ${this.showOverlay ? 'show' : ''}\">\n        <div class=\"icon-container\">\n          <div class=\"icon-row\">\n            <button class=\"icon-button\" @click=\"${this.toggleBrightnessCard}\">\n              <iconify-icon icon=\"material-symbols-light:sunny-outline-rounded\"></iconify-icon>\n            </button>\n            <button class=\"icon-button\">\n              <iconify-icon icon=\"material-symbols-light:volume-up-outline-rounded\"></iconify-icon>\n            </button>\n            <button class=\"icon-button\">\n              <iconify-icon\n                icon=\"material-symbols-light:do-not-disturb-on-outline-rounded\"\n              ></iconify-icon>\n            </button>\n            <button class=\"icon-button\">\n              <iconify-icon icon=\"material-symbols-light:alarm-add-outline-rounded\"></iconify-icon>\n            </button>\n            <button\n              class=\"icon-button\"\n              @touchstart=\"${this.handleSettingsIconTouchStart}\"\n              @touchend=\"${this.handleSettingsIconTouchEnd}\"\n              @touchcancel=\"${this.handleSettingsIconTouchEnd}\"\n            >\n              <iconify-icon icon=\"material-symbols-light:settings-outline-rounded\"></iconify-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  renderBrightnessCard() {\n    const brightnessDisplayValue = this.getBrightnessDisplayValue();\n    return html`\n      <div\n        class=\"brightness-card ${this.showBrightnessCard ? 'show' : ''}\"\n        style=\"transition: ${this.brightnessCardTransition};\"\n      >\n        <div class=\"brightness-control\">\n          <div class=\"brightness-dots-container\">\n            <div\n              class=\"brightness-dots\"\n              @click=\"${this.handleBrightnessChange}\"\n              @mousedown=\"${this.handleBrightnessDrag}\"\n              @mousemove=\"${(e) => e.buttons === 1 && this.handleBrightnessDrag(e)}\"\n              @touchstart=\"${this.handleBrightnessDrag}\"\n              @touchmove=\"${this.handleBrightnessDrag}\"\n            >\n              ${[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(\n                (value) => html`\n                  <div\n                    class=\"brightness-dot ${value <= brightnessDisplayValue ? 'active' : ''}\"\n                    data-value=\"${value}\"\n                  ></div>\n                `\n              )}\n            </div>\n          </div>\n          <span class=\"brightness-value\">${brightnessDisplayValue}</span>\n        </div>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Rubik:wght@300;400&display=swap\"\n        rel=\"stylesheet\"\n      />\n      ${!this.showBrightnessCard ? this.renderOverlay() : ''} ${this.renderBrightnessCard()}\n    `;\n  }\n}\n\ncustomElements.define('google-controls', Controls);\n"],"names":["Controls","LitElement","properties","hass","type","Object","showOverlay","Boolean","showBrightnessCard","brightnessCardTransition","String","brightness","Number","visualBrightness","isAdjustingBrightness","touchStartY","lastBrightnessUpdateTime","styles","controlsStyles","sharedStyles","constructor","super","this","initializeProperties","setupEventListeners","addEventListener","handleTouchStart","bind","handleTouchMove","handleTouchEnd","disconnectedCallback","clearAllTimers","clearOverlayDismissTimer","clearBrightnessCardDismissTimer","brightnessUpdateTimer","clearTimeout","brightnessStabilizeTimer","longPressTimer","event","preventDefault","touches","clientY","deltaY","changedTouches","SWIPE_THRESHOLD","dispatchEvent","CustomEvent","detail","startOverlayDismissTimer","dismissBrightnessCard","dismissOverlay","overlayDismissTimer","setTimeout","OVERLAY_DISMISS_TIMEOUT","startBrightnessCardDismissTimer","brightnessCardDismissTimer","toggleBrightnessCard","handleBrightnessChange","e","clickedDot","target","closest","newBrightness","parseInt","dataset","value","updateBrightnessValue","handleBrightnessDrag","rect","shadowRoot","querySelector","getBoundingClientRect","x","includes","clientX","relativeX","Math","max","min","left","width","newValue","round","MIN_BRIGHTNESS","MAX_BRIGHTNESS","async","setBrightness","Date","now","BRIGHTNESS_STABILIZE_DELAY","BRIGHTNESS_DEBOUNCE_DELAY","internalValue","callService","message","data","command","Promise","resolve","DEFAULT_SENSOR_UPDATE_DELAY","error","console","handleSettingsIconTouchStart","LONG_PRESS_TIMEOUT","handleSettingsIconTouchEnd","getBrightnessDisplayValue","renderOverlay","html","renderBrightnessCard","brightnessDisplayValue","buttons","map","render","customElements","define"],"mappings":"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"}