import{css as e,LitElement as t,html as i}from"https://unpkg.com/lit-element@2.4.0/lit-element.js?module";const s={image_url:"",display_time:15,crossfade_time:3,image_fit:"contain",image_list_update_interval:3600,image_order:"sorted",show_debug:!1,sensor_update_delay:500},r="media-source",a="unsplash-api",n="immich-api",o="picsum",h="url",g=e`:host{--crossfade-time:3s;--overlay-height:120px;display:block;position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:1;font-family:'Product Sans Regular',sans-serif;font-weight:400}`,d=e`.background-container{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#000}.background-image{position:absolute;top:0;left:0;width:100%;height:100%;background-size:contain;background-position:center;background-repeat:no-repeat;transition:opacity var(--crossfade-time) ease-in-out}.error{color:red;padding:16px}.debug-info{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:rgba(0,0,0,.7);color:#fff;padding:16px;font-size:14px;z-index:10;max-width:80%;max-height:80%;overflow:auto;border-radius:8px}`;customElements.define("background-rotator",class extends t{static get properties(){return{hass:{type:Object},config:{type:Object},screenWidth:{type:Number},screenHeight:{type:Number},showDebugInfo:{type:Boolean},currentImageIndex:{type:Number},imageList:{type:Array},imageA:{type:String},imageB:{type:String},activeImage:{type:String},preloadedImage:{type:String},error:{type:String},debugInfo:{type:Object},isTransitioning:{type:Boolean}}}static get styles(){return[d,g]}constructor(){super(),this.initializeProperties()}initializeProperties(){this.currentImageIndex=-1,this.imageList=[],this.imageA="",this.imageB="",this.activeImage="A",this.preloadedImage="",this.error=null,this.debugInfo={},this.isTransitioning=!1}connectedCallback(){super.connectedCallback(),this.startImageRotation(),this.startImageListUpdates()}disconnectedCallback(){super.disconnectedCallback(),this.clearTimers()}clearTimers(){clearInterval(this.imageUpdateInterval),clearInterval(this.imageListUpdateInterval)}startImageListUpdates(){this.updateImageList(),this.imageListUpdateInterval=setInterval((()=>{this.updateImageList()}),1e3*this.config.image_list_update_interval)}startImageRotation(){this.updateImage(),this.imageUpdateInterval=setInterval((()=>{this.updateImage()}),1e3*this.config.display_time)}getImageSourceType(){const{image_url:e}=this.config;return e.startsWith("media-source://")?r:e.startsWith("https://api.unsplash")?a:e.startsWith("immich+")?n:e.includes("picsum.photos")?o:h}getImageUrl(){const e=Date.now(),t=Math.floor(e/1e3);return this.config.image_url.replace(/\${width}/g,this.screenWidth).replace(/\${height}/g,this.screenHeight).replace(/\${timestamp_ms}/g,e).replace(/\${timestamp}/g,t)}async updateImageList(){if(!this.screenWidth||!this.screenHeight)return this.error="Screen dimensions not set",void this.requestUpdate();try{const e=await this.fetchImageList();this.imageList="random"===this.config.image_order?e.sort((()=>.5-Math.random())):e.sort(),this.error=null,this.debugInfo.imageList=this.imageList}catch(e){this.error=`Error updating image list: ${e.message}`}this.requestUpdate()}async fetchImageList(){switch(this.getImageSourceType()){case r:return this.getImagesFromMediaSource();case a:return this.getImagesFromUnsplashAPI();case n:return this.getImagesFromImmichAPI();default:return[this.getImageUrl()]}}async getImagesFromMediaSource(){try{const e=this.config.image_url.replace(/^media-source:\/\//,"");return(await this.hass.callWS({type:"media_source/browse_media",media_content_id:e})).children.filter((e=>"image"===e.media_class)).map((e=>e.media_content_id))}catch(e){return console.error("Error fetching images from media source:",e),[this.getImageUrl()]}}async getImagesFromUnsplashAPI(){try{const e=await fetch(`${this.config.image_url}&count=30`);return(await e.json()).map((e=>e.urls.regular))}catch(e){return console.error("Error fetching images from Unsplash API:",e),[this.getImageUrl()]}}async getImagesFromImmichAPI(){try{const e=this.config.image_url.replace(/^immich\+/,""),t=await fetch(`${e}/albums`,{headers:{"x-api-key":this.config.immich_api_key}}),i=(await t.json()).map((async t=>{const i=await fetch(`${e}/albums/${t.id}`,{headers:{"x-api-key":this.config.immich_api_key}});return(await i.json()).assets.filter((e=>"IMAGE"===e.type)).map((t=>`${e}/assets/${t.id}/original`))}));return(await Promise.all(i)).flat()}catch(e){return console.error("Error fetching images from Immich API:",e),[this.getImageUrl()]}}async preloadImage(e){return new Promise(((t,i)=>{const s=new Image;s.onload=()=>t(e),s.onerror=()=>i(new Error(`Failed to load image: ${e}`)),s.src=e}))}async preloadNextImage(){const e=this.getImageSourceType()===o?this.getImageUrl():this.imageList[(this.currentImageIndex+1)%this.imageList.length];try{this.preloadedImage=await this.preloadImage(e)}catch(e){console.error("Error preloading next image:",e),this.preloadedImage=""}}async getNextImage(){let e;return this.preloadedImage?(e=this.preloadedImage,this.preloadedImage=""):(this.getImageSourceType()===o?e=this.getImageUrl():(this.currentImageIndex=(this.currentImageIndex+1)%this.imageList.length,e=this.imageList[this.currentImageIndex]),e=await this.preloadImage(e)),e}async updateImage(){if(!this.isTransitioning)try{const e=await this.getNextImage();await this.transitionToNewImage(e),this.preloadNextImage()}catch(e){console.error("Error updating image:",e)}}async transitionToNewImage(e){this.isTransitioning=!0,"A"===this.activeImage?this.imageB=e:this.imageA=e,this.updateDebugInfo(),this.requestUpdate(),await new Promise((e=>setTimeout(e,50))),this.activeImage="A"===this.activeImage?"B":"A",this.requestUpdate(),await new Promise((e=>setTimeout(e,1e3*this.config.crossfade_time+50))),this.isTransitioning=!1}updateDebugInfo(){this.debugInfo={imageA:this.imageA,imageB:this.imageB,activeImage:this.activeImage,preloadedImage:this.preloadedImage,imageList:this.imageList,currentImageIndex:this.currentImageIndex,config:this.config,error:this.error}}renderBackgroundImages(){const e="A"===this.activeImage?1:0,t="B"===this.activeImage?1:0;return i`<div class="background-container"><div class="background-image" style="background-image:url('${this.imageA}');opacity:${e}"></div><div class="background-image" style="background-image:url('${this.imageB}');opacity:${t}"></div></div>`}renderDebugInfo(){return i`<div class="debug-info"><h2>Background Rotator Debug Info</h2><p><strong>Screen Width:</strong> ${this.screenWidth}</p><p><strong>Screen Height:</strong> ${this.screenHeight}</p><p><strong>Device Pixel Ratio:</strong> ${window.devicePixelRatio||1}</p><p><strong>Image A:</strong> ${this.imageA}</p><p><strong>Image B:</strong> ${this.imageB}</p><p><strong>Active Image:</strong> ${this.activeImage}</p><p><strong>Preloaded Image:</strong> ${this.preloadedImage}</p><p><strong>Is Transitioning:</strong> ${this.isTransitioning}</p><p><strong>Current Image Index:</strong> ${this.currentImageIndex}</p><p><strong>Error:</strong> ${this.error}</p><h3>Image List:</h3><pre>${JSON.stringify(this.imageList,null,2)}</pre><h3>Config:</h3><pre>${JSON.stringify(this.config,null,2)}</pre></div>`}render(){return i`${this.renderBackgroundImages()} ${this.error?i`<div class="error">${this.error}</div>`:""} ${this.showDebugInfo?this.renderDebugInfo():""}`}});const l=e`.overlay{position:fixed;bottom:0;left:0;width:100%;height:var(--overlay-height);background-color:rgba(255,255,255,.95);color:#333;box-sizing:border-box;transition:transform .3s ease-in-out;transform:translateY(100%);z-index:4;box-shadow:0 -2px 10px rgba(0,0,0,.1);display:flex;flex-direction:column;justify-content:center;align-items:center;border-top-left-radius:20px;border-top-right-radius:20px}.overlay.show{transform:translateY(0)}.icon-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center}.icon-row{display:flex;justify-content:space-between;align-items:center;width:85%}.icon-button{background:0 0;border:none;cursor:pointer;color:#333;padding:10px;border-radius:50%;transition:background-color .3s ease;display:flex;align-items:center;justify-content:center}.icon-button:hover{background-color:rgba(0,0,0,.1)}.brightness-card{position:fixed;bottom:20px;left:20px;right:20px;background-color:rgba(255,255,255,.95);border-radius:20px;padding:40px 20px;box-shadow:0 2px 10px rgba(0,0,0,.1);z-index:3;transform:translateY(calc(100% + 20px));transition:transform .3s ease-in-out}.brightness-card.show{transform:translateY(0)}.brightness-control{display:flex;align-items:center;width:100%}.brightness-dots-container{flex-grow:1;margin-right:10px;padding:0 10px}.brightness-dots{display:flex;justify-content:space-between;align-items:center;height:30px}.brightness-dot{width:12px;height:12px;border-radius:50%;background-color:#d1d1d1;transition:background-color .2s ease;cursor:pointer}.brightness-dot.active{background-color:#333}.brightness-value{min-width:60px;text-align:right;font-size:40px;color:#000;font-weight:300;margin-right:20px}iconify-icon{font-size:50px;display:block;width:50px;height:50px}`;customElements.define("google-controls",class extends t{static get properties(){return{hass:{type:Object},showOverlay:{type:Boolean},showBrightnessCard:{type:Boolean},brightnessCardTransition:{type:String},brightness:{type:Number},visualBrightness:{type:Number},isAdjustingBrightness:{type:Boolean},touchStartY:{type:Number},lastBrightnessUpdateTime:{type:Number}}}static get styles(){return[l,g]}constructor(){super(),this.initializeProperties(),this.setupEventListeners()}initializeProperties(){this.showOverlay=!1,this.showBrightnessCard=!1,this.brightnessCardTransition="none",this.brightness=128,this.visualBrightness=128,this.isAdjustingBrightness=!1,this.lastBrightnessUpdateTime=0}setupEventListeners(){this.addEventListener("touchstart",this.handleTouchStart.bind(this)),this.addEventListener("touchmove",this.handleTouchMove.bind(this)),this.addEventListener("touchend",this.handleTouchEnd.bind(this))}disconnectedCallback(){super.disconnectedCallback(),this.clearAllTimers()}clearAllTimers(){this.clearOverlayDismissTimer(),this.clearBrightnessCardDismissTimer(),this.brightnessUpdateTimer&&clearTimeout(this.brightnessUpdateTimer),this.brightnessStabilizeTimer&&clearTimeout(this.brightnessStabilizeTimer),this.longPressTimer&&clearTimeout(this.longPressTimer)}handleTouchStart(e){e.preventDefault(),this.touchStartY=e.touches[0].clientY}handleTouchMove(e){e.preventDefault()}handleTouchEnd(e){const t=this.touchStartY-e.changedTouches[0].clientY;t>50&&!this.showBrightnessCard?(this.showOverlay=!0,this.dispatchEvent(new CustomEvent("overlayToggle",{detail:!0})),this.startOverlayDismissTimer()):t<-50&&(this.showBrightnessCard?this.dismissBrightnessCard():this.dismissOverlay())}startOverlayDismissTimer(){this.clearOverlayDismissTimer(),this.overlayDismissTimer=setTimeout((()=>{this.dismissOverlay()}),1e4)}clearOverlayDismissTimer(){this.overlayDismissTimer&&(clearTimeout(this.overlayDismissTimer),this.overlayDismissTimer=null)}startBrightnessCardDismissTimer(){this.clearBrightnessCardDismissTimer(),this.brightnessCardDismissTimer=setTimeout((()=>{this.dismissBrightnessCard()}),1e4)}clearBrightnessCardDismissTimer(){this.brightnessCardDismissTimer&&(clearTimeout(this.brightnessCardDismissTimer),this.brightnessCardDismissTimer=null)}dismissOverlay(){this.showOverlay=!1,this.clearOverlayDismissTimer(),this.dispatchEvent(new CustomEvent("overlayToggle",{detail:!1}))}toggleBrightnessCard(){this.showBrightnessCard?this.dismissBrightnessCard():(this.showOverlay=!1,this.brightnessCardTransition="none",this.showBrightnessCard=!0,this.dispatchEvent(new CustomEvent("overlayToggle",{detail:!1})),this.dispatchEvent(new CustomEvent("brightnessCardToggle",{detail:!0})),this.startBrightnessCardDismissTimer())}dismissBrightnessCard(){this.brightnessCardTransition="transform 0.3s ease-in-out",this.showBrightnessCard=!1,this.clearBrightnessCardDismissTimer(),this.dispatchEvent(new CustomEvent("brightnessCardToggle",{detail:!1}))}async handleBrightnessChange(e){const t=e.target.closest(".brightness-dot");if(!t)return;const i=parseInt(t.dataset.value);await this.updateBrightnessValue(25.5*i)}async handleBrightnessDrag(e){const t=this.shadowRoot.querySelector(".brightness-dots").getBoundingClientRect(),i=e.type.includes("touch")?e.touches[0].clientX:e.clientX,s=Math.max(0,Math.min(i-t.left,t.width)),r=Math.round(s/t.width*10);await this.updateBrightnessValue(25.5*r)}async updateBrightnessValue(e){this.isAdjustingBrightness=!0,this.visualBrightness=Math.max(1,Math.min(255,Math.round(e))),this.dispatchEvent(new CustomEvent("brightnessChange",{detail:this.visualBrightness})),this.brightnessUpdateTimer&&clearTimeout(this.brightnessUpdateTimer),this.brightnessStabilizeTimer&&clearTimeout(this.brightnessStabilizeTimer),this.brightnessUpdateTimer=setTimeout((async()=>{await this.setBrightness(e),this.lastBrightnessUpdateTime=Date.now(),this.brightnessStabilizeTimer=setTimeout((()=>{this.isAdjustingBrightness=!1}),2e3)}),250)}async setBrightness(e){const t=Math.max(1,Math.min(255,Math.round(e)));try{await this.hass.callService("notify","mobile_app_liam_s_room_display",{message:"command_screen_brightness_level",data:{command:t}}),await this.hass.callService("notify","mobile_app_liam_s_room_display",{message:"command_update_sensors"}),await new Promise((e=>setTimeout(e,500))),this.brightness=t}catch(e){console.error("Error setting brightness:",e),this.visualBrightness=this.brightness}this.startBrightnessCardDismissTimer()}handleSettingsIconTouchStart(){this.longPressTimer=setTimeout((()=>{this.dispatchEvent(new CustomEvent("debugToggle"))}),1e3)}handleSettingsIconTouchEnd(){this.longPressTimer&&clearTimeout(this.longPressTimer)}getBrightnessDisplayValue(){return Math.round(this.visualBrightness/25.5)}renderOverlay(){return i`<div class="overlay ${this.showOverlay?"show":""}"><div class="icon-container"><div class="icon-row"><button class="icon-button" @click="${this.toggleBrightnessCard}"><iconify-icon icon="material-symbols-light:sunny-outline-rounded"></iconify-icon></button> <button class="icon-button"><iconify-icon icon="material-symbols-light:volume-up-outline-rounded"></iconify-icon></button> <button class="icon-button"><iconify-icon icon="material-symbols-light:do-not-disturb-on-outline-rounded"></iconify-icon></button> <button class="icon-button"><iconify-icon icon="material-symbols-light:alarm-add-outline-rounded"></iconify-icon></button> <button class="icon-button" @touchstart="${this.handleSettingsIconTouchStart}" @touchend="${this.handleSettingsIconTouchEnd}" @touchcancel="${this.handleSettingsIconTouchEnd}"><iconify-icon icon="material-symbols-light:settings-outline-rounded"></iconify-icon></button></div></div></div>`}renderBrightnessCard(){const e=this.getBrightnessDisplayValue();return i`<div class="brightness-card ${this.showBrightnessCard?"show":""}" style="transition:${this.brightnessCardTransition}"><div class="brightness-control"><div class="brightness-dots-container"><div class="brightness-dots" @click="${this.handleBrightnessChange}" @mousedown="${this.handleBrightnessDrag}" @mousemove="${e=>1===e.buttons&&this.handleBrightnessDrag(e)}" @touchstart="${this.handleBrightnessDrag}" @touchmove="${this.handleBrightnessDrag}">${[1,2,3,4,5,6,7,8,9,10].map((t=>i`<div class="brightness-dot ${t<=e?"active":""}" data-value="${t}"></div>`))}</div></div><span class="brightness-value">${e}</span></div></div>`}render(){return i`<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400&display=swap" rel="stylesheet">${this.showBrightnessCard?"":this.renderOverlay()} ${this.renderBrightnessCard()}`}});const c=e`.night-mode{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#000;display:flex;justify-content:center;align-items:center;z-index:5}.night-time{color:#fff;font-size:35vw;font-weight:400;font-family:'Product Sans Regular',sans-serif}`;customElements.define("night-mode",class extends t{static get properties(){return{hass:{type:Object},currentTime:{type:String},brightness:{type:Number},isInNightMode:{type:Boolean},previousBrightness:{type:Number}}}static get styles(){return[g,c]}constructor(){super(),this.initializeProperties(),this.timeUpdateInterval=null}initializeProperties(){this.currentTime="",this.brightness=1,this.isInNightMode=!1,this.previousBrightness=1}connectedCallback(){super.connectedCallback(),this.updateTime(),this.startTimeUpdates(),this.enterNightMode()}disconnectedCallback(){super.disconnectedCallback(),this.timeUpdateInterval&&clearInterval(this.timeUpdateInterval)}startTimeUpdates(){this.timeUpdateInterval=setInterval((()=>{this.updateTime()}),1e3)}updateTime(){const e=new Date;this.currentTime=e.toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",hour12:!0}).replace(/\s?[AP]M/,"")}async enterNightMode(){if(!this.isInNightMode)try{await this.toggleAutoBrightness(!1),await new Promise((e=>setTimeout(e,100))),await this.setBrightness(1),await new Promise((e=>setTimeout(e,100))),await this.toggleAutoBrightness(!0),this.isInNightMode=!0,this.requestUpdate()}catch(e){console.error("Error entering night mode:",e)}}async exitNightMode(){if(this.isInNightMode)try{await this.toggleAutoBrightness(!1),await new Promise((e=>setTimeout(e,100))),await this.setBrightness(this.previousBrightness),this.isInNightMode=!1,this.requestUpdate(),this.dispatchEvent(new CustomEvent("nightModeExit"))}catch(e){console.error("Error exiting night mode:",e)}}async setBrightness(e){if(this.hass)try{await this.hass.callService("notify","mobile_app_liam_s_room_display",{message:"command_screen_brightness_level",data:{command:e}}),await this.hass.callService("notify","mobile_app_liam_s_room_display",{message:"command_update_sensors"}),await new Promise((e=>setTimeout(e,500))),this.brightness=e,this.requestUpdate()}catch(e){console.error("Error setting brightness:",e)}}async toggleAutoBrightness(e){if(this.hass)try{await this.hass.callService("notify","mobile_app_liam_s_room_display",{message:"command_auto_screen_brightness",data:{command:e?"turn_on":"turn_off"}})}catch(e){console.error("Error toggling auto brightness:",e)}}updated(e){e.has("hass")&&this.checkLightSensor()}checkLightSensor(){if(!this.hass?.states["sensor.liam_room_display_light_sensor"])return;const e=this.hass.states["sensor.liam_room_display_light_sensor"],t=0===parseInt(e.state);t&&!this.isInNightMode?(this.previousBrightness=this.brightness,this.enterNightMode()):!t&&this.isInNightMode&&this.exitNightMode()}render(){return i`<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400&display=swap" rel="stylesheet"><div class="night-mode"><div class="night-time">${this.currentTime}</div></div>`}});const m=e`.weather-component{display:flex;justify-content:space-between;align-items:center;color:#fff;font-family:'Product Sans Regular',sans-serif;width:100%;max-width:400px}.left-column{display:flex;flex-direction:column;align-items:flex-start}.right-column{display:flex;flex-direction:column;align-items:flex-end}.date{font-size:25px;margin-bottom:5px;font-weight:400;margin-left:10px;text-shadow:0 2px 3px rgba(0,0,0,.5)}.time{font-size:90px;line-height:1;font-weight:500;text-shadow:0 2px 4px rgba(0,0,0,.5)}.weather-info{display:flex;align-items:center;margin-top:10px;font-weight:500;margin-right:-5px}.weather-icon{width:50px;height:50px}.temperature{font-size:35px;font-weight:500;text-shadow:0 2px 3px rgba(0,0,0,.5)}.aqi{font-size:20px;padding:5px 10px;border-radius:6px;font-weight:500;margin-top:5px;margin-left:30px;align-self:flex-end;min-width:60px;text-align:center}`;customElements.define("weather-clock",class extends t{static get properties(){return{hass:{type:Object},date:{type:String},time:{type:String},temperature:{type:String},weatherIcon:{type:String},aqi:{type:String}}}static get styles(){return[m,g]}constructor(){super(),this.resetProperties(),this.updateTimer=null}resetProperties(){this.date="",this.time="",this.temperature="",this.weatherIcon="",this.aqi=""}connectedCallback(){super.connectedCallback(),this.updateWeather(),this.scheduleUpdate()}disconnectedCallback(){super.disconnectedCallback(),this.updateTimer&&clearTimeout(this.updateTimer)}scheduleUpdate(){const e=new Date,t=1e3*(60-e.getSeconds())-e.getMilliseconds();this.updateTimer=setTimeout((()=>{this.updateWeather(),this.scheduleUpdate()}),t)}updateWeather(){const e=new Date;this.updateDateTime(e),this.updateWeatherData(),this.requestUpdate()}updateDateTime(e){this.date=e.toLocaleDateString("en-US",{weekday:"short",month:"short",day:"numeric"}),this.time=e.toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",hour12:!0}).replace(/\s?[AP]M/,"")}updateWeatherData(){if(!this.hass)return;const e=this.hass.states["weather.64_west_glen_ave"],t=this.hass.states["sensor.ridgewood_air_quality_index"];e&&(this.temperature=`${Math.round(e.attributes.temperature)}°`,this.weatherIcon=this.getWeatherIcon(e.state)),t&&(this.aqi=t.state)}getWeatherIcon(e){return{"clear-night":"clear-night",cloudy:"cloudy-fill",fog:"fog",hail:"hail",lightning:"thunderstorms","lightning-rainy":"thunderstorms-rain",partlycloudy:"partly-cloudy-day",pouring:"rain",rainy:"drizzle",snowy:"snow","snowy-rainy":"sleet",sunny:"clear-day",windy:"wind","windy-variant":"wind",exceptional:"not-available"}[e]||"not-available-fill"}getAqiColor(e){return e<=50?"#68a03a":e<=100?"#f9bf33":e<=150?"#f47c06":e<=200?"#c43828":e<=300?"#ab1457":"#83104c"}render(){return i`<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600&display=swap" rel="stylesheet"><div class="weather-component"><div class="left-column"><div class="date">${this.date}</div><div class="time">${this.time}</div></div><div class="right-column"><div class="weather-info"><img src="https://basmilius.github.io/weather-icons/production/fill/all/${this.weatherIcon}.svg" class="weather-icon" alt="Weather icon"> <span class="temperature">${this.temperature}</span></div><div class="aqi" style="background-color:${this.getAqiColor(parseInt(this.aqi))}">${this.aqi} AQI</div></div></div>`}});class u extends t{static get properties(){return{hass:{type:Object},config:{type:Object},screenWidth:{type:Number},screenHeight:{type:Number},showDebugInfo:{type:Boolean},showOverlay:{type:Boolean},brightness:{type:Number},visualBrightness:{type:Number},showBrightnessCard:{type:Boolean},brightnessCardTransition:{type:String},isNightMode:{type:Boolean},currentTime:{type:String},isInNightMode:{type:Boolean},isAdjustingBrightness:{type:Boolean},lastBrightnessUpdateTime:{type:Number}}}static get styles(){return[g]}constructor(){super(),this.initializeProperties(),this.boundUpdateScreenSize=this.updateScreenSize.bind(this)}initializeProperties(){this.showDebugInfo=!1,this.showOverlay=!1,this.isNightMode=!1,this.showBrightnessCard=!1,this.brightnessCardTransition="none",this.isAdjustingBrightness=!1,this.lastBrightnessUpdateTime=0,this.updateScreenSize()}setConfig(e){if(!e.image_url)throw new Error("You need to define an image_url");this.config={...s,...e},this.showDebugInfo=this.config.show_debug}connectedCallback(){super.connectedCallback(),window.addEventListener("resize",this.boundUpdateScreenSize)}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("resize",this.boundUpdateScreenSize)}updateScreenSize(){const e=window.devicePixelRatio||1;this.screenWidth=Math.round(window.innerWidth*e),this.screenHeight=Math.round(window.innerHeight*e)}async handleBrightnessChange(e){await this.controls.updateBrightnessValue(e)}handleOverlayToggle(e){this.showOverlay=e,this.requestUpdate()}handleBrightnessCardToggle(e){this.showBrightnessCard=e,this.requestUpdate()}handleNightModeChange(e){this.isNightMode=e,this.requestUpdate()}handleDebugToggle(){this.showDebugInfo=!this.showDebugInfo,this.requestUpdate()}render(){return this.isNightMode?i`<night-mode .currentTime="${this.currentTime}"></night-mode>`:i`<link href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400&display=swap" rel="stylesheet"><background-rotator .hass="${this.hass}" .config="${this.config}" .screenWidth="${this.screenWidth}" .screenHeight="${this.screenHeight}" .showDebugInfo="${this.showDebugInfo}"></background-rotator><weather-clock .hass="${this.hass}"></weather-clock><controls .hass="${this.hass}" .showOverlay="${this.showOverlay}" .showBrightnessCard="${this.showBrightnessCard}" .brightnessCardTransition="${this.brightnessCardTransition}" .brightness="${this.brightness}" .visualBrightness="${this.visualBrightness}" @brightnessChange="${e=>this.handleBrightnessChange(e.detail)}" @overlayToggle="${e=>this.handleOverlayToggle(e.detail)}" @brightnessCardToggle="${e=>this.handleBrightnessCardToggle(e.detail)}" @debugToggle="${()=>this.handleDebugToggle()}"></controls>`}}customElements.define("google-card",u),window.customCards=window.customCards||[],window.customCards.push({type:"google-card",name:"Google Card",description:"A Google Nest Hub-inspired card for Home Assistant",preview:!0,documentationURL:"https://github.com/liamtw22/google-card"});export{u as GoogleCard};
//# sourceMappingURL=GoogleCard.js.map
